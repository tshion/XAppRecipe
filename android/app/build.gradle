plugins {
    id 'com.android.application'

    // Kotlin
    id 'kotlin-android'
    id 'kotlin-kapt'

    // AndroidX Navigation
    id "androidx.navigation.safeargs.kotlin"

    // Google OSS
    id "com.google.android.gms.oss-licenses-plugin"
}

android {
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.versionCodeOverride = appver_code
                output.versionNameOverride = appver_name
            }
        }
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    buildToolsVersion build_tools_version
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"

            // Firebase Crashlytics の無効化
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion compile_sdk_version
    defaultConfig {
        aaptOptions {
            // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
            // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
        applicationId "com.github.tshion.xapprecipe"
        minSdkVersion min_sdk_version
        targetSdkVersion compile_sdk_version
        versionCode 1
        versionName '0.0.1'


        def properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        // XApp API V1 の基本パス
        buildConfigField "String", "API_XAPP_V1",
            "\"${properties.getProperty('url_api_xapp_v1')}\""

        // 地図の基本URL
        buildConfigField "String", "URL_MAP",
            "\"https://www.google.co.jp/maps\""

        // Twitter のURL
        buildConfigField "String", "URL_Twitter",
            "\"https://twitter.com/shion_engineer\""

        // YouTube のURL
        buildConfigField "String", "URL_YouTube",
            "\"https://www.youtube.com/channel/UCAB_s7KJI0Ms6pjjSASte2w\""
    }
    flavorDimensions "mode"
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude "DebugProbesKt.bin"
    }
    productFlavors {
        dev {
            dimension "mode"
            versionName "dev-${appver_name}"
        }

        prd {
            dimension "mode"

            // XApp API V1 の基本パス
            buildConfigField "String", "API_XAPP_V1",
                "\"undefined\""
        }
    }
}

repositories {
    flatDir {
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')

    // Java 8+
    coreLibraryDesugaring libs.desugarJdk

    // Local Project
    implementation project(":app_core")
    implementation project(":app_data")

    // 共通設定
    testImplementation libPack.unitTestLocal

    // AndroidPreparation
    debugImplementation libs.androidPreparation.debugger
    implementation libs.androidPreparation.intent

    // AndroidX
    implementation libs.jetpack.biometric
    implementation libs.jetpack.browser
    implementation libPack.jetpack.camera
    implementation libs.jetpack.constraintlayout
    implementation libs.jetpack.core
    implementation libs.jetpack.fragment
    implementation libPack.jetpack.navigation
    implementation libs.jetpack.recyclerview
    implementation libs.jetpack.workmanager

    // Hyperion
    devImplementation libs.hyperion.core
    debugImplementation libs.hyperion.plugin
    devImplementation libs.hyperion.plugin

    // Google
    implementation libs.ossLicenses
    kapt libs.autoService

    // Kotlin Coroutines
    implementation libs.kotlinx.coroutines

    // Material Design
    implementation libs.material

    // mktools
    implementation libs.mktools

    // PermissionsDispatcher
    implementation libs.permissionsDispatcherKtx

    // Picasso
    implementation libs.picasso

    // ZXing
    implementation(libs.zxingEmbedded) { transitive = false }
    implementation libs.zxing
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch (Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
